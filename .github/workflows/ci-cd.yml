name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code quality checks
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [agent-hub, agent-hub-api, mcp-tools-server]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js and check quality (agent-hub)
        if: matrix.service == 'agent-hub'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: agent-hub/package-lock.json

      - name: Set up Python and check quality (Python services)
        if: matrix.service == 'agent-hub-api' || matrix.service == 'mcp-tools-server'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies and check code quality (agent-hub)
        if: matrix.service == 'agent-hub'
        working-directory: ./agent-hub
        run: |
          npm ci
          echo "Skipping linting as no lint script is configured"

      - name: Install dependencies and check code quality (agent-hub-api)
        if: matrix.service == 'agent-hub-api'
        working-directory: ./agent-hub-api
        run: |
          pip install uv
          uv sync --frozen --no-dev --system
          # Add any linting or formatting checks here if available

      - name: Install dependencies and check code quality (mcp-tools-server)
        if: matrix.service == 'mcp-tools-server'
        working-directory: ./mcp-tools-server
        run: |
          pip install uv
          uv pip install . --system
          # Add any linting or formatting checks here if available

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [agent-hub, agent-hub-api, mcp-tools-server]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan (agent-hub)
        if: matrix.service == 'agent-hub'
        working-directory: ./agent-hub
        run: |
          npm audit --audit-level=moderate

      - name: Set up Python (Python services)
        if: matrix.service == 'agent-hub-api' || matrix.service == 'mcp-tools-server'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Run security scan (Python services)
        if: matrix.service == 'agent-hub-api' || matrix.service == 'mcp-tools-server'
        working-directory: ./${{ matrix.service }}
        run: |
          pip install uv
          pip install safety
          # Run safety check on requirements if available

  # Build and test all services
  build-and-test:
    needs: [code-quality, security-scan]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [agent-hub, agent-hub-api, mcp-tools-server]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js (for agent-hub)
        if: matrix.service == 'agent-hub'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: agent-hub/package-lock.json

      - name: Set up Python (for agent-hub-api and mcp-tools-server)
        if: matrix.service == 'agent-hub-api' || matrix.service == 'mcp-tools-server'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies (agent-hub)
        if: matrix.service == 'agent-hub'
        working-directory: ./agent-hub
        run: |
          npm ci

      - name: Install uv (for Python services)
        if: matrix.service == 'agent-hub-api' || matrix.service == 'mcp-tools-server'
        run: |
          pip install uv

      - name: Install dependencies (agent-hub-api)
        if: matrix.service == 'agent-hub-api'
        working-directory: ./agent-hub-api
        run: |
          uv sync --frozen --no-dev --system

      - name: Install dependencies (mcp-tools-server)
        if: matrix.service == 'mcp-tools-server'
        working-directory: ./mcp-tools-server
        run: |
          uv pip install . --system

      - name: Run tests (agent-hub)
        if: matrix.service == 'agent-hub'
        working-directory: ./agent-hub
        run: |
          npm test -- --no-watch --no-progress --browsers=ChromeHeadless

      - name: Run tests (agent-hub-api)
        if: matrix.service == 'agent-hub-api'
        working-directory: ./agent-hub-api
        run: |
          # Run any available tests
          echo "Running tests for agent-hub-api"

      - name: Run tests (mcp-tools-server)
        if: matrix.service == 'mcp-tools-server'
        working-directory: ./mcp-tools-server
        run: |
          # Run any available tests
          echo "Running tests for mcp-tools-server"

      - name: Build (agent-hub)
        if: matrix.service == 'agent-hub'
        working-directory: ./agent-hub
        run: |
          npm run build -- --prod

      - name: Archive build artifacts
        if: matrix.service == 'agent-hub'
        uses: actions/upload-artifact@v4
        with:
          name: agent-hub-dist
          path: agent-hub/dist/
          if-no-files-found: error

  # Build and push Docker images
  docker-build-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [agent-hub, agent-hub-api, mcp-tools-server]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts (agent-hub)
        if: matrix.service == 'agent-hub'
        uses: actions/download-artifact@v4
        with:
          name: agent-hub-dist
          path: agent-hub/dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to production (only on tag pushes)
  deploy:
    needs: docker-build-push
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Deploy notification
        run: |
          echo "Deployment triggered for tag ${{ github.ref_name }}"
          echo "Services deployed:"
          echo "- Agent Hub Frontend"
          echo "- Agent Hub API"
          echo "- MCP Tools Server"
          echo ""
          echo "To deploy these services, run the following commands:"
          echo "docker run -d -p 4200:80 ghcr.io/${{ github.repository_owner }}/agent-hub:${{ github.ref_name }}"
          echo "docker run -d -p 8000:8000 --env-file .env ghcr.io/${{ github.repository_owner }}/agent-hub-api:${{ github.ref_name }}"
          echo "docker run -d -p 3001:3001 ghcr.io/${{ github.repository_owner }}/mcp-tools-server:${{ github.ref_name }}"